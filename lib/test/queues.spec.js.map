{"version":3,"sources":["../../test/queues.spec.js"],"names":["Queue","require","describe","it","queues","data","console","log","Promise","resolve","reject","setTimeout","assert","eventually","equal","run"],"mappings":";;AAAA,IAAIA,QAAQC,QAAQ,uBAAR,CAAZ;;AAEAC,SAAS,gBAAT,EAA2B,YAAW;AACpCA,WAAS,MAAT,EAAiB,YAAW;AAC1BC,OAAG,oCAAH,EAAyC,YAAW;AAClD,UAAIC,SAAS,CACX,UAAUC,IAAV,EAAgB;AACdC,gBAAQC,GAAR,CAAYF,IAAZ,EAAkB,CAAlB;AACA,eAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,qBAAW,MAAM;AACfF,oBAAQJ,OAAO,QAAf;AACD,WAFD,EAEG,GAFH;AAGD,SAJM,CAAP;AAKD,OARU,EASX,UAAUA,IAAV,EAAgB;AACdC,gBAAQC,GAAR,CAAYF,IAAZ,EAAkB,CAAlB;AACA,eAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,qBAAW,MAAM;AACfF,oBAAQJ,OAAO,GAAf;AACD,WAFD,EAEG,GAFH;AAGD,SAJM,CAAP;AAKD,OAhBU,EAiBX,UAAUA,IAAV,EAAgB;AACdC,gBAAQC,GAAR,CAAYF,IAAZ,EAAkB,CAAlB;AACA,eAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,qBAAW,MAAM;AACfF,oBAAQJ,OAAO,OAAf;AACD,WAFD,EAEG,GAFH;AAGD,SAJM,CAAP;AAKD,OAxBU,CAAb;;AA2BA,aAAOO,OAAOC,UAAP,CAAkBC,KAAlB,CAAwBd,MAAMe,GAAN,CAAUX,MAAV,EAAkB,SAAlB,CAAxB,EAAsD,qBAAtD,CAAP;AACD,KA7BD;AA8BD,GA/BD;AAgCD,CAjCD","file":"queues.spec.js","sourcesContent":["var Queue = require('../src/utils/queue.js');\r\n\r\ndescribe('utils/queue.js', function() {\r\n  describe('#run', function() {\r\n    it('should return \"Packy, hollow word\"', function() {\r\n      var queues = [\r\n        function (data) {\r\n          console.log(data, 1);\r\n          return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              resolve(data + 'hollow');\r\n            }, 400);\r\n          });\r\n        },\r\n        function (data) {\r\n          console.log(data, 2);\r\n          return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              resolve(data + \" \");\r\n            }, 100);\r\n          });\r\n        },\r\n        function (data) {\r\n          console.log(data, 3);\r\n          return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              resolve(data + \"word!\");\r\n            }, 600);\r\n          });\r\n        },\r\n      ];\r\n\r\n      return assert.eventually.equal(Queue.run(queues)(\"Packy, \"), \"Packy, hollow word!\");\r\n    });\r\n  });\r\n});"]}